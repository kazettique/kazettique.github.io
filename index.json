[{"content":"Hi~ 我是 Woody 👋\n在某個因緣際會下，轉職開始寫程式，現在是小小前端工程師 🙃\n這裡會整理出我自己的筆記，如果能幫助到各位就太好了！\n曾經在日本留學，打滾了一年多的時間，也曾在大阪日本橋當過打工仔\n喜歡去日本背包客旅行，尤其喜歡體驗鄉下、在地生活的氛圍 🎒\n透過 Airbnb 體驗日本各地的特色民宿，跟日本民宿老闆交流，順便做國民外交 🤘\n  音樂\n  歌手/樂團：\n Rock: AC/DC、Guns N’ Roses、Queen、Creedence Clearwater Revival J-Pop: YOASOBI、酸欠少女さユり、Silent Siren、 House/EDM: Nora En Pure、Daft Punk、Chemical Brothers    音樂類型：Rock、House、Synthwave、Ambient、Lo-Fi\n  歌單：Deep Houses Relax、Spanish Guitar Chill Out、RetroWave / Outrun、Retrowave / Synthwave\n    動畫作品：冰菓、吹響吧！上低音號、賭博默示錄、JOJO 的奇妙冒險、鬼滅之刃\n  遊戲：世紀帝國 2、刺客教條、秘境探險、戰艦世界\n  書單\n  非文學類：、我決定簡單的生活：從斷捨離到極簡主義，丟東西後改變我的 12 件事！、少，但是更好、我簡單豐富的生活提案：從居住、物品到人際關係，50 個擺脫金錢和外在覊絆，化繁為簡的富足人生、最有生產力的一年、一週工作 4 小時：擺脫朝九晚五的窮忙生活，晉身「新富族」！、安靜，就是力量：內曏者如何發揮積極的力量！、為什麼去遠方：啟程，到別人的生命裡尋找答案、Evernote 超效率數位筆記術\n  文學類：古籍研究社系列、咖啡館推理事件簿系列、古書堂事件手帖系列、一個人的好天氣\n      Manner Maketh Man\n\u0026ndash; Harry\n   ","permalink":"https://kazettique.github.io/about/","summary":"Hi~ 我是 Woody 👋 在某個因緣際會下，轉職開始寫程式，現在是小小前端工程師 🙃 這裡會整理出我自己的筆記，如果能幫助到各位就太好了！ 曾經在日本留學，打滾了","title":"關於我"},{"content":"優先度排程（Prioritization）是一門學問，就跟其他的技能一樣需要不斷地練習，高效工程師不斷地再持續精進這件事。\n建立一個好的待辦事項清單可以確保不會遺漏掉任何事情。首先依優先度排定一個必須做的事項清單。\n作家 David Allen 1 在他的著作「Getting Things Done」2中提到：「人類的大腦擅長的是資訊處理，而非資訊儲存」3。所以比較好的方式就是將需要記憶的事情，用其他方式記錄下來，而不是依靠大腦的記憶。\n代辦清單的兩個元素 待辦清單必須有以下兩個重要的元素：\n 有固定格式的陳述 放在容易取得的地方  我們可以很快地從清單中看出哪些是目前可以完成的，或是在某些空擋，一瞥清單就可以很快地找到能夠做些什麽，而不是費勁心思努力回想。\n代辦清單的形式 待辦清單可以是很多種的形式，它可以是一本可隨身攜帶的筆記本、任務管理軟體（電腦桌面程式或是手機 APP）、同步到雲端的文字檔（可以同時在電腦及手機上檢視、編輯）。而怎樣的形式其實不是重點，最重要的是在於我們將腦海中的想法抽取出來，集中在一個地方存起來，並在想到的時候隨時隨地可以取得這些資訊。\n專注在有產值的事 做有實際影響力的事，完成任務的「質」大於「量」。每天回顧當天所做的事，是否對增進開發進度、減少寫出 bug 的機會 ⋯⋯ 等。\n當我們拿出實際成果，就沒有人會抱怨拒絕出席會議、很慢回信、或不處理一些小 bug。當我們把重要的事情做好，瑣碎的雜事就變得不這麼重要了。在生活中也是如此：若我們為了下一趟旅行開始存錢，與其每天省下一杯 3 美元的星巴克拿鐵，花時間研究如何買廉價航空的機票反而是比較有效率的作法。\n不要試著做完所有的事情（因爲那是不可能的，我們的時間有限），專注重要的事、專注在有價值產出的事。4\n任務類型的四象限 作家 Stephen Covey 5 認爲，我們不該將「重要」跟「緊急」畫上等號。Covey 將任務分成四大類，分成兩個因素：「重要」（Important）或「不重要」（Not Important）、「緊急」（Urgent）或「不緊急」（Not Urgent）區分，分成四個象限，如下圖：\n以長遠的視野來看，第二象限的事項才是最重要的投資，也是影響力最大的。但通常這區的事項沒有確切的截止日期，花時間投入也不會有立竿見影的成效，而且在短期的時程看來，有可能看起來是在浪費時間（因爲看不出任何顯著的成效，但卻花了很多時間在上面），所以我們通常很容易忽略這一象限。\n從我們的待辦事項中，分辨哪些屬於第二象限（不緊急但重要）的任務，並將歸類於第三象限（緊急但不重要）及第四象限（不緊急亦不重要）的優先度排到最後。\n此外，要特別注意第一象限（緊急且重要）的事項，因爲它們看起來是必須優先處理的任務。雖然第二象限最重要，但我們也不能放著緊急的事不管（例如：production 上的重大 bug）。Edmond 提到：「緊急的事像是：重大的 bug、迫在眉睫的截止日 ⋯⋯ 等等，這些事的根本原因有可能來自於缺乏執行某些第二象限任務，例如：有重大的 bug 可能源自於不夠高的測試覆蓋率；時常發生開發時間不足，可能是因為期程的規劃不周全，或是時間預估有誤差 ⋯⋯ 等等。所以在第二象限投資更多時間，也有助於減少第一象限需要做的事情。」6\n捍衛開發時間7 比起其他專業人員，工程師需要藉長期且連續的時間來提高生產力。8\n在連續的時間裡維持心理學家 Mihály Csíkszentmihályi9 所提倡的「心流」（flow），就能夠提高生產力。這種狀態是「一個不需要刻意維持專注、忘卻時間流逝、無我的狀態」10。心流需要高度的專注力，打岔會中斷心流。\n美國著名程式設計師兼風險投資家 Paul Graham11 在他的論文「創造者的日程、管理者的日程」12提到，管理者（管理階層）的時程規劃通常以「小時」為單位，但是對創造者（執行團隊，例如：軟體工程師、作家等）而言，比較適合以至少「半天」爲單位去執行他們的任務。微軟的一個研究13也顯示：員工若被信件、訊息回覆打斷工作之後，平均需要花 10 至 15 分鐘的時間拉回注意力到原本正專心做的事。14\n盡可能規劃工作排程，為自己保留完整且連續的開發時間，排除不必要的會議及關閉不必要的聊天訊息通知。15\n避免同時進行太多的事項16 避免過多的多工，因爲大腦無法同時處理太多的事情，同時進行太多的事情，反而會降低專注力、甚至影響生產力。\n「Personal Kanban」17一書中提到，我們必須要限制進行中任務18的數量。作者 Barry 及 Benson 提到：「我們越接近大腦所能處理資訊的承載極限，就越容易累積心理壓力，也會影響效率。」19，「給大腦的工作量線性增加，但出錯的機率卻是指數增加。」20\n人類的大腦雖然可以同時處理很多事情，但是若我們講求品質、效率及生產力，那就要盡量避免多工處理。想像它是一個單執行緒的處理器，將不必要的事情先排除吧！\n解決拖延症 心理學家 Heidi Halvorson 21 在她的著作「Succeed」22提出一個幫助我們改善拖延症問題的方法，稱爲「if-then 計劃」（if-then plan）。我們在做事前，先執行這個計劃，例如：「若三點會議結束了，我就來查這個預期很花時間的 bug」、「若在晚餐後，我就來看一則關於安卓開發的演講」。\n以程式的術語來説，就是以一個「條件」（例如某個時間點）來作爲「觸發」一個事件（我們規劃要執行的任務），只要有了明確的觸發條件，就能減少拖延的發生。23\n「if-then 計劃」讓我們在創造者日程24中，很快決定在片段的時間裡，能夠做些什麽事。試問自己：「在計畫事項開始前，若有 20 分鐘的空擋，我就要做 OOO」。試著列出一個待辦事項清單，裡面的事項是可以用零碎時間完成的，並利用空擋時間完成它們吧！\n定期檢視優先順序25 定期瀏覽代辦事項，將目前高優先度的往前面排，做滾動式動態調整。26\n優化工作流程，就如前面所描述的，很多人提出不同的見解及方式，世上沒有所謂的最佳解。適合的方法也因人而異，唯有找到最適合自己的方式、甚至混合各種做法（hybrid）、打造自己的系統（build up your system），才能真正提升生產力。\n重點回顧  列出待辦事項清單：切記大腦是做決策的中樞，不是儲存資料的硬碟 做有產值的事：不要想著完成所有事 花時間投資在「重要但非緊急」的事：一切都是爲了長遠的計劃 減少任務切換的次數：這都是爲了減少切換工作模式時耗費的精神力、也減少專注力的損耗 用「if-then 計劃」對抗拖延症 養成定期檢查優先順序的習慣  結語 本章的主題雖然是圍繞著「代辦事項清單」，但是也提到很多概念，又有很多書籍的節錄、文獻的參考及名人的語錄，為了不讓本文變得過於冗長，讓讀者偏離了主題，所以就以註腳的形式放在最後，希望不會為各位帶來閱讀上的困擾。\n延伸閲讀  [譯]Maker\u0026rsquo;s schedule, Manager\u0026rsquo;s schedule · TomoHung（繁中翻譯） Maker\u0026rsquo;s Schedule, Manager\u0026rsquo;s Schedule - 知乎 我不是故意裝忙，只想好好工作！「勿擾模式」工具能奪回時間主控權嗎？ | by JH | Star Rocket | Mar, 2021 | Medium 腦海裡的演員們（Your Brain at Work） - An Explorer    中文譯名：大衛．艾倫 \u0026#x21a9;\u0026#xfe0e;\n 中文書名 - 搞定！：工作效率大師教你:事情再多照樣做好的搞定 5 步驟 \u0026#x21a9;\u0026#xfe0e;\n Human brain is optimized for processing and not for storage. \u0026#x21a9;\u0026#xfe0e;\n 「少，但是更好」一書也提到相同的概念：「排除多數『瑣事』，專注少數『要事』」（Distinguishes the vital few from the trivial many） \u0026#x21a9;\u0026#xfe0e;\n 史蒂芬‧柯維， 其最有名的著作為：「與成功有約：高效能人士的七個習慣」 \u0026#x21a9;\u0026#xfe0e;\n 第二象限並非絕對比第一象限重要，而要視當下情況而定。我們總不能放著 production 的重大 bug 不修，然後去第二象限的事。（感謝 Raistlin.C 補充 🙏 ） \u0026#x21a9;\u0026#xfe0e;\n 原文標題：Protect Your Maker\u0026rsquo;s Schedule \u0026#x21a9;\u0026#xfe0e;\n 雖然 Edmond 這麼說，但我認為不限工程師。我也有認識的設計師希望自己的工作時間不要被太多會議打斷。 \u0026#x21a9;\u0026#xfe0e;\n 美國心理學家米哈里．契克森。 關於心流，可參考他 2004 年於 TED 的演講：談「心流」 \u0026#x21a9;\u0026#xfe0e;\n A state of effortless concentration so deep that they lose their sense of time, of themselves, of their problems. \u0026#x21a9;\u0026#xfe0e;\n 中文譯名：保羅．格雷厄姆 \u0026#x21a9;\u0026#xfe0e;\n Maker\u0026rsquo;s Schedule, Manager\u0026rsquo;s Schedule \u0026#x21a9;\u0026#xfe0e;\n Disruption and Recovery of Computing Tasks: Field Study, Analysis, and Directions \u0026#x21a9;\u0026#xfe0e;\n Employees take an average of 10 to 15 minutes to return to focused activity after handling email and instant messaging interruptions. \u0026#x21a9;\u0026#xfe0e;\n 編按：但我相信很多人跟我一樣，有些會議時間是我們沒有辦法決定的@@ \u0026#x21a9;\u0026#xfe0e;\n 原文標題：Limit the Amount of Work in Progress \u0026#x21a9;\u0026#xfe0e;\n Amazon.co.jp: Personal Kanban: Mapping Work | Navigating Life (English Edition) 電子書籍: Barry, Tonianne DeMaria, Jim Benson: Kindle ストア \u0026#x21a9;\u0026#xfe0e;\n Work in Progress \u0026#x21a9;\u0026#xfe0e;\n The closer you get to reach- ing your capacity, the more the stress taxes your brain’s resources and impacts your performance. \u0026#x21a9;\u0026#xfe0e;\n Increasing work linearly increases the likelihood of failure exponentially. \u0026#x21a9;\u0026#xfe0e;\n 中文譯名：海蒂．格蘭特．海佛森 \u0026#x21a9;\u0026#xfe0e;\n 中文書名：實現：達成目標的心智科學 \u0026#x21a9;\u0026#xfe0e;\n 掌握一個習慣的觸發條件，就能輕鬆改變習慣。——「為什麼我們這樣生活，那樣工作？」 \u0026#x21a9;\u0026#xfe0e;\n Maker\u0026rsquo;s Schedule \u0026#x21a9;\u0026#xfe0e;\n 原文標題：Make a Routine of Prioritization \u0026#x21a9;\u0026#xfe0e;\n [問卦] 滾動式到底是什麼啊 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://kazettique.github.io/posts/effective-engineer/03/","summary":"優先度排程（Prioritization）是一門學問，就跟其他的技能一樣需要不斷地練習，高效工程師不斷地再持續精進這件事。 建立一個好的待辦事","title":"「高效工程師」筆記 - 第三章：製作待辦清單"},{"content":"優化的學習方式能帶來更高的效益（leverage），如果我們要增進自我能力，「成長型思維」是不可或缺的因素。\n實踐成長型思維 固定型思維（Fixed mindset）的人認爲「一個人的成敗來自於先天上的條件（例如：天賦、才智），失敗就代表我們不夠聰明，或是能力不足」。但是對成長型思維（Growth mindset）的人而言，「透過努力，我們能夠改變自己的智力、能力」。就算一開始在某個領域只是一個初學者，但透過不斷地挑戰、從失敗中學習，終究會帶來豐碩的成果。\n要思考如何撰寫我們的故事，而不是讓別人來定義我們，也不是我們的學歷、工作經歷。自身的價值，來自於我們如何定義它。\n 英雄不怕出身低\n 勇於嘗試新事物、無論是溝通技巧、新的網路技術，或是其他技能，不要在責備自己的失敗、無法控制的外部因素上蹉跎。在學習過程中，找到對自己更有效率地學習方式，並從中獲取寶貴的經驗。\n學習效率的投資 我們在學校學到關於「複利」的概念：\n複利的特性  指數型的成長 越早投入，成長的速度越快（這也是爲何投資專家都建議越早投入 401k 退休儲蓄計劃越好，因爲你有更多的時間滾利） 利息的差異對後續影響甚鉅，而且也是非線性的  Edmond 將學習比喻成複利：\n學習就像是複利 1.學習過程也是指數型成長的 當我們學得越多，我們的背景知識越雄厚，因此學習起來就更加快速。\n假設我們看第一本英文書，每讀一頁需要查 10 個單字；那麼當我們很辛苦看完這本書之後，或許在讀第二本英文書時，每頁只有 1 個單字沒學過。\n2. 越早學習，就能加速學習速度（根據第一點） 例如：第一份好的工作，能夠讓我們找到更好的工作，並影響往後的職涯發展\n3. 如同滾利，學習量對對長期發展來説很大 複利的曲線如下：\n可以回想一下，我們是不是時常花時間在做毫無挑戰、無趣、沒意義的事情上？這其實對學習的效率並不好，我們失去了增進學習效率及未來成長的機會。1\n尋找「成長導向」的工作環境 每天工作的時間平均有 8 小時，也就是一天有 1/3 的時間是在工作上，如果說我們要提升效益（leverage），最好的「著力點」（leverage point）就是選擇一個以成長為導向的工作環境，因為我們都知道，環境對我們的影響甚鉅。\n在此，Edmond 以六個因素分別探討如何尋找一個「以成長為導向」的工作環境：\n六個因素 1.快速成長的公司 當 Sheryl Sandberg 猶豫要不要加入 Google 的時候2，Google 的 CEO Eric Schmidt 給了一個很有價值的建議：\n 如果你得到一張太空船的搭乘券，不要問哪一個位子，跳上船就對了。3\n 謎：老司機要發車了，抓穩囉～\n快速成長的團隊及公司提供更多的資源，也吸引更多的人才，進而組成更強大的團隊。\n2.員工的訓練計畫 良好、完善的訓練計畫代表公司重視新進員工。以 Google 為例，他們投資大量資源在「engEDU 計畫」。這個課程包含一系列的講座、研討會、設計文件、開發指南文件（Programming guides）等，可以幫助工程師們及管理階層。Facebook 也有一個為期六週、稱作「Bootcamp」的訓練計畫，讓新人可以學習熟悉公司的工具以及開發流程。\n3.開放思維 以 SCRUM 的思維（敏捷開發）來看，我們不是在一開始就希望做到完美，而是循序漸進地，透過持續修正、不斷改進來接近目標。4\n有時候，團隊成員會因意見向左，互相挑戰對方，而這時保持開放的心態去討論，接納他人的回饋，才能成為未來進步的墊腳石。而勇於發問、不怕問笨問題的文化，才能知道自己不足的地方，並虛心接受他人的建議。對於失敗的地方，我們不是要抓戰犯、檢討別人，而是分析原因，以防下次再發生。\n4.工作的步調 快速的工作步調、快速的迭代可以增進學習的速度。小公司比較沒有官僚的文化，所以不會像大型公司有繁複的審核流程，可以很容易地做一些實驗性的發想。但最重要的，是找到適合自己工作步調的地方。\n5.團隊的組成 身邊若是身邊有聰明、充滿創造力的同事，就能使我們成長。或許有些人還能成為我們的導師。或許你/妳天賦異稟、才華洋溢或自學力強。但工程師是講求團隊精神的工作（相信很多職業都是），相互的交流會激發出更多創意的火花，比閉門造車好多了。除了有助於未來職涯的發展外，也能提升我們的工作幸福指數（work happiness），誰都不想跟難相處的人共事，對吧？\n6.自治 擁有調配、規劃自己時間的自由，才有能力去學習，因為我們有掌控自己時間的權利。\n在小公司擁有更多自己的選擇，能做更多不同的事。Edmond 舉例，在 Quora 工作的三年間，他有機會做了各式各樣的事，面對不同的挑戰。身為一位工程師，他開發實驗性的工具、即時分析框架（Real-time analytics frameworks）、infrastructure、網路攻擊偵測（spam detection）、手機開發等。另一方面，也做了很多跟工程無關的事：面試官的訓練、製作新人訓練教材、打造導師制度（mentoring program）、還有執行產學合作的實習計畫 ⋯⋯ 等等。在比較小規模的公司，才能做到如此廣泛的事情。也正因為如此，他才能從中學到很多不同的經驗。\n關於這節的小小心得 看完這節的當下，我不禁思索：「主管指定要新人看這本書真的好嗎？會不會看了這一節之後，評估後覺得公司沒有使人成長的環境就閃人了？」 😂\n但後來想想，其實不盡然。很多公司都是人來來去去的，本來就是蠻正常的。\n雖然這節主要在講的是關於工作環境對於學習的重要性，但我覺得另一個更重要的點是，「個人的學習及成長」獲利的並不僅限於個人，對於公司也是正面的影響，就如前面第五點的概念：周遭的人使我們成長；而我們個人的成長，就是整個團隊成長；團隊的成長，即是公司的成長。公司的成長會提升價值，進而吸引更多的人才，這是一個正循環。\n花點時間在開發新技能 隨著專案的進行，待辦事項會不斷地增加，就算我們想要快速地將那些代辦事項給做完，但那個清單並不會因此而減少。我們花了很多時間在執行各種任務，卻沒有時間發展、學習新的技能，而這些才是能夠增進我們做事效率的技能。\n20% 時間（20% time） 是 Google 發起的一個概念5。當工程師每週用一天的時間（也就是一週工作時數 40hr x 20% = 8hr）來做個人專案（side project），就可以為公司帶來成長。\n或許這個想法頗有爭議，因為就時間上來看，工程師一週的五個工作天裡，只有四天的時間是有為公司產出。但以 Google 的例子，如果沒有這一天的投資在學習上，就不會有 Gmail、Google News 及 AdSense 這些產品的出現，而這些產品也是目前 Google 核心的產品線之一。\n那我們要如何運用這 20% 的時間呢？我們可以在已經了解的技術領域中，做更深入地學習。或是學習其他不同的領域。微軟 Windows 部門的前主管 Steven Sinofsky 曾提倡「臨近訓練（Adjacent Discipline）」想法，主要描述我們學習的内容，若是同一個領域的知識，學習的效果將會相輔相成。\n10 個學習上的建議  向公司内優秀工程師學習他們在程式裡的抽象化概念 寫更多的程式碼，熟能生巧，透過做中學 多參加讀書會、技術研討會，或是看一些教學資源 精通我們主要使用的程式語言，深入探討深層的概念，熟悉核心語法。另外，確保其中一個我們會的語言是脚本語言（scripting language），因爲它能夠讓我們快速開始，無需編譯 將我們的程式碼給最嚴格的人做 code review，降低標準對程式碼品質的進步無益，也要避免寫了很炫炮的程式碼，但無法派上用場 參加想要精進的課程：例如：公司的工作坊、附近大學、或線上課程（例如：Coursera、edX、Udemy、Udacity） 參與一些有興趣的專案的討論 參與不同類型的專案。如果我們發現自己不斷用同樣的方式做重複的事情，那就是來嘗試新技術的時候。 確保我們所屬的團隊裡有資深工程師可以作爲學習對象 勇於研讀陌生的程式碼，不要害怕去理解它。Get hands dirty! 🤘  終身學習 我們都知道終身學習的重要性。在工作以外的時間裡，提供 10 個切入點來養成學習的習慣，這些不一定是要跟工作的領域有關係，也可以是培養一些興趣。\n養成學習習慣的 10 個方向 學習新的程式語言或是框架 軟體領域變化、演進快速，所以要養成持續學習的習慣，這也是它有趣的地方，因爲學習新技術可以激發新的思維，進而優化我們的做事方式\n投資高需求技能 觀察最近的趨勢，看哪些是目前非常短缺的技能，學習那些技能，也能為自己的履歷充值\n養成閲讀的習慣 Bill Gates 花很多時間在閱讀上，尤其是非文學類的書籍。雖然聽起來很八股，但閲讀一直是很多名人、偉人建議培養的好習慣，閲讀能夠增進我們的視野、了解世界的運作模式。可能一開始會覺得閱讀速度很慢，但是如同前面談到的複利特性，讀越多書，閱讀速度亦會隨之增加。\n參與討論群組、讀書會 跟相同興趣或是研究相同主題的人們相互討論，可以激勵彼此\n參加講座、研討會、線下聚會 這些場所可以很容易得知目前該領域的趨勢，也可以藉機會認識相同興趣的人們，或是適合的職缺\n建立、鞏固人脈 認識的人越多，我們的機會就越多。作家 Richard Wiseman 在他的著作 The Luck Factor6 中提到：「幸運的人會在日常生活中不斷認識很多人，藉此得到更多的機運。他們認識越多人，就有創造更大的機運為人生帶來正面的影響。」7\n追蹤一些講師的部落格 善用網路資源去學習他人的經驗\n寫教學文章 「教學相長」，當我們在寫教學文章的時候，我們需要把我們已經學會的觀念轉化成文字，而且避免寫出錯誤的資訊，也迫使我們必須檢查自己的觀念是否正確。除了撰寫教學文章之外，在研討會上演講也是一樣的。8\n動手打造個人專案（side project） 做個人專案，就算跟程式無關也無妨，有時候做與擅長領域迥異的事，例如：繪畫、寫作等，反而可以幫助我們成爲更好的工程師。\n追求所愛 比起一些被動娛樂（例如：看電視），將時間投資在有意義的興趣上，不但能培養新技能，也可以增進心理健康。\n結語 本章不斷帶出學習的重要性，也強調自我提升（self-improvement）所帶來正面的影響，無論是在職涯、或是人生成就方面。Edmond 提供了他個人的一些意見，雖然不盡然適用所有人，但是其宗旨卻不變，尋找屬於自己的學習方式及目標，打造一個更好的自己。\n很多面試官會問面試者這個問題：「五年後的你，會如何看待現在的你？」9\n保持成長型思維，隨時做好準備，才能迎接隨時會來臨的機運。\n  編按：但現實面而言，有時那些無意義的事也許是主管的命令，非做不可 \u0026#x21a9;\u0026#xfe0e;\n 編按：若拿到 Google 的 offer 有誰會猶豫要不要去？😂 \u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;If you’re offered a seat on a rocket ship, you don’t ask what seat. You just get on.\u0026rdquo; \u0026#x21a9;\u0026#xfe0e;\n 在後面的章節也會提到關於敏捷的思維 \u0026#x21a9;\u0026#xfe0e;\n 3M 的 15% 法則（15% Rule）概念早在 1948 年提出。Google 則是在 2004 年提出 20% 時間。參考維基百科（感謝 Souch.H 補充 🙏 ） \u0026#x21a9;\u0026#xfe0e;\n 中文版書名：幸運人生的四大心理學法則：提升直覺、擺脫厄運，最科學的 30 天運氣大改造 \u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;Lucky people dramatically increase the possibility of a lucky chance encounter by meeting a large number of people in their daily lives. The more people they meet, the greater opportunity they have of running into someone who could have a positive effect on their lives\u0026rdquo; \u0026#x21a9;\u0026#xfe0e;\n 編按：能夠 live coding 才是真正厲害的强者！ \u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;Where do you see yourself five years from now?\u0026rdquo; \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://kazettique.github.io/posts/effective-engineer/02/","summary":"優化的學習方式能帶來更高的效益（leverage），如果我們要增進自我能力，「成長型思維」是不可或缺的因素。 實踐成長型思維 固定型思維（Fix","title":"「高效工程師」筆記 - 第二章：優化學習"},{"content":"作者 Edmond 在 Quora1 工作的時候，因為公司人事擴編，所以自願投入工程師招募的準備作業。身為一個以往都在寫程式開發的工程師而言，他開始思索，要如何讓新進的工程師們可以很快速地熟悉公司的整個工作流程及環境。\n新進人員訓練（Onboarding Program） Edmond 參考了其他公司的方式，導入了「導師制度」（mentoring program），讓新進人員進公司的前三個月，搭配一位導師。而導師的工作包含了所有關於這位新進人員的所有事情，像是幫他做 Code Review、規劃技術面的學習計畫、討論在開發上遇到問題是該如何做決策及取捨、如何排定任務的優先順序、如何跟其他團隊成員合作 ⋯⋯ 等等。簡單來說，這些就就是要幫助新進人員更快熟悉公司的運作方式。\n為何要花這麼多心思在訓練新人？尤其在時程緊迫的時候，工程師可能連開發的時間都不夠了，哪有這美國時間手把手教新人那些瑣碎的事情呢？Edmond 又為何要為新人設計出這一連串的「課程」呢？\n關於效益（Leverage） Edmond 提出了 leverage 這個詞，字面上的意思是「槓桿」，它像是效率、產出的概念，在此我譯作「效益」，也就是我們花時間、精力投入某件事之後，所得到的成效及結果。Edmond 提出 leverage 的公式如下：\n$$ Leverage = \\frac{Impact \\thinspace Produced}{Time \\thinspace Invested} $$\n增加效益的三個方式 要提升 leverage 可以朝三個方面著手：\n 縮短完成某件事項的時間 增進某些事的產出 專注在「高效益、高報酬」的任務  因此，針對這三點，我們可以問自己三個問題：\n 我要如何在更多的時間完成這件事？ 在做同樣一件事，要如何得到更多的價值？ 還有哪些事是值得花時間去做，進而能獲得更多的價值？  其實簡單來說，就是要提升生產力。這跟 80/20 法則的概念很類似：專注在 20% 最重要的事情上，達成 80% 的成效。\nleverage 同樣也代表「投資報酬率（ROI，Return On Investment）」，高效的工程師並非花更多時間完成更多的任務，而是選擇以高效率的方式、完成高優先度的任務（high priority task）。\n在後面的章節，作者會分析為何花大量的時間在新人訓練上，是一個 high leverage task。\n重點回顧  評估每件事的投資報酬率 有系統性地增進使用時間的效益：在有限的時間裡，事項之間的取捨 專注在著力點（leverage point）：時間有限（而且寶貴），著眼於高回報的事項    Quora 是一個知識庫的平台，有問答的系統，類似的平台像是：奇摩知識+、軟體工程師每天都在用的 StackOverflow，或是「日本版的 StackOverflow」：Qiita。 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://kazettique.github.io/posts/effective-engineer/01/","summary":"作者 Edmond 在 Quora1 工作的時候，因為公司人事擴編，所以自願投入工程師招募的準備作業。身為一個以往都在寫程式開發的工程師而言，他開始思索，要如何讓新進的","title":"「高效工程師」筆記 - 第一章：專注在高效的活動"},{"content":"在因緣際會下，我閱讀了「高效工程師」（Effective Engineer）這本書，它是公司指定讀物。\n在閱讀的過程中，整理出一些筆記，裡面提到對於工程師而言很好的觀念。筆記內容會參雜原文的中文翻譯（用我自己的話翻譯，非 Google 機器翻譯）以及自身的看法，若是我自己覺得翻譯不太好的地方，會附上英文原文在註解，以免誤導。\n作者 Edmond Lau 是來自矽谷的工程師，曾經待過很多知名的科技公司，像是：Google、Quora、Ooyala、Quip。他曾一週的工作 70-80 小時，曾經在晚餐後繼續工作；或是假日拜訪親戚時，仍不忘在空檔時間回覆公司郵件。大家都希望能用更多的時間提高更多的產值，但這讓 Edmond 不禁思索：「付出這麼多的時間，才是通往成功之路必須付出的代價嗎？」\n我們都深知高工時帶來的極大負面影響，包括生產力低落、職業倦怠、容易犯低級錯誤 ⋯⋯ 等等。因此，在時間有限且要提高生產力兩個制約條件下，所得出的結論，就是提升工作效率，而作者 Edmond 也在本書中從不同的面相，分享他的親身經歷、科技公司內部的政策、文化來告訴我們，要如何成為一個高效率的工程師。\n作者在最後的章節也說明：本書的概念不僅限於「工程師」這個職業，也不僅限於職場，適用於任何事情上\n無論正在閱讀的你/妳是否是工程師，希望我的筆記或多或少對你/妳有幫助！\nNot working hard, but working SMART!\n","permalink":"https://kazettique.github.io/posts/effective-engineer/00/","summary":"在因緣際會下，我閱讀了「高效工程師」（Effective Engineer）這本書，它是公司指定讀物。\n在閱讀的過程中，整理出一些筆記，裡面提到對於工程師而言很好的觀念。筆記內容會參雜原文的中文翻譯（用我自己的話翻譯，非 Google 機器翻譯）以及自身的看法，若是我自己覺得翻譯不太好的地方，會附上英文原文在註解，以免誤導。\n作者 Edmond Lau 是來自矽谷的工程師，曾經待過很多知名的科技公司，像是：Google、Quora、Ooyala、Quip。他曾一週的工作 70-80 小時，曾經在晚餐後繼續工作；或是假日拜訪親戚時，仍不忘在空檔時間回覆公司郵件。大家都希望能用更多的時間提高更多的產值，但這讓 Edmond 不禁思索：「付出這麼多的時間，才是通往成功之路必須付出的代價嗎？」\n我們都深知高工時帶來的極大負面影響，包括生產力低落、職業倦怠、容易犯低級錯誤 ⋯⋯ 等等。因此，在時間有限且要提高生產力兩個制約條件下，所得出的結論，就是提升工作效率，而作者 Edmond 也在本書中從不同的面相，分享他的親身經歷、科技公司內部的政策、文化來告訴我們，要如何成為一個高效率的工程師。\n作者在最後的章節也說明：本書的概念不僅限於「工程師」這個職業，也不僅限於職場，適用於任何事情上\n無論正在閱讀的你/妳是否是工程師，希望我的筆記或多或少對你/妳有幫助！\nNot working hard, but working SMART!","title":"「高效工程師」筆記 - 前言"},{"content":"React-Beautiful-DnD是一個很有人氣的 DnD 套件，除了基本的 Drag \u0026amp; Drop 功能之外，還有優雅的拖曳動畫、鍵盤拖曳支援等，使用起來也很容易入手。\n基本要素 React-Beautiful-DnD由三種要素組成，分別為：\u0026lt;DragDropContext /\u0026gt;、\u0026lt;Draggable /\u0026gt;、\u0026lt;Droppable /\u0026gt;\n下圖為官方的示意圖：\nDragDropContext 開發 React 的人對於\u0026lt;DragDropContext /\u0026gt;應該不難理解， 看到context這個關鍵字就能領略箇中含義， \u0026lt;DragDropContext /\u0026gt;所定義的是要實作拖拉功能的範圍\nDraggable 定義拖曳元件，將所要拖曳的元件包在\u0026lt;Draggable /\u0026gt;裡面，結構如下：\nimport { Draggable } from \u0026#34;react-beautiful-dnd\u0026#34;; \u0026lt;Draggable draggableId={taskId} index={taskIndex}\u0026gt; {(provided, snapshot) =\u0026gt; { const { draggableProps, dragHandleProps, innerRef } = provided; const { isDragging } = snapshot; return ( \u0026lt;div ref={innerRef} {...draggableProps} {...dragHandleProps} data-is-dragging={isDragging}\u0026gt; \u0026lt;h4\u0026gt;I can DRAG! ✋\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; ); }} \u0026lt;/Draggable\u0026gt;; 要拖曳的元件不能直接作為children直接包在\u0026lt;Draggable /\u0026gt;中間， 必須是一個函式（官方的教學影片說裡面是放一個renderProps），並在return的時候返回我們要拖拉的元件， 而函式的參數中，有\u0026lt;Draggable /\u0026gt;的兩個物件：provided及snapshot\nprovided provided物件中包含draggableProps、dragHandleProps及innerRef\n innerRef：用來綁定拖曳的 DOM 元素 draggableProps：提供拖曳元件的props dragHandleProps：則可另外定義拖拉的範圍，像是綁定一個 Icon 做這個拖曳元件的拖拉  snapshot snapshot物件中，我目前使用到的只有isDragging，在拖曳的狀態下，可以用來做樣式上的變換\nDroppable 定義放置的元件，如同\u0026lt;Draggable /\u0026gt;一樣的結構，只是是加上放置的屬性，結構如下：\nimport { Droppable } from \u0026#34;react-beautiful-dnd\u0026#34;; \u0026lt;Droppable droppableId={columnId} type=\u0026#34;task\u0026#34;\u0026gt; {(provided, snapshot) =\u0026gt; { const { droppableProps, innerRef, placeholder } = provided; const { isDraggingOver } = snapshot; return ( \u0026lt;div ref={innerRef} {...droppableProps} data-is-over={isDraggingOver}\u0026gt; \u0026lt;h2\u0026gt;Drop on ME!! 🙌\u0026lt;/h2\u0026gt; {placeholder} \u0026lt;/div\u0026gt; ); }} \u0026lt;/Droppable\u0026gt;; provided provided物件中包含droppableProps、placeholder及innerRef\n innerRef：用來綁定可放置的 DOM 元素 droppableProps提供放置元件的props placeholder就如其名，是一個佔位元素，在拖曳（但尚未 drop）的時候，提供一個放置的空間  snapshot snapshot物件中，我目前使用到的只有isDraggingOver，在被拖曳元件 hover 的狀態下，用來做樣式上的變換\n最後附上範例連結\n參考資料  atlassian/react-beautiful-dnd: Beautiful and accessible drag and drop for lists with React Beautiful and Accessible Drag and Drop with react-beautiful-dnd from @alexandereardon on @eggheadio vertical list with multiple drop targets - CodeSandbox  ","permalink":"https://kazettique.github.io/posts/react-beautiful-dnd-example/","summary":"React-Beautiful-DnD是一個很有人氣的 DnD 套件，除了基本的 Drag \u0026amp; Drop 功能之外，還有優雅的拖曳動畫、鍵盤拖曳支援等，使用起來也很容易","title":"React-Beautiful-DnD 簡單示範"},{"content":"基本概念 Image Reference\nHTML5 提供原生的HTML5 Drag \u0026amp; Drop API（以下簡稱 HTML5 DnD）實現 DOM 元素拖曳的功能。但是由於在 React 的生態底下，並不適合操作實體 DOM，因此 React-DnD 居於中間角色，作為雙方溝通的橋樑。對於 DOM 方監控 HTML5 DnD，對 React 方做 component 及 state 的處理。\n1. Monitors  監控 HTML5 DnD 事件，其中包含三個要素，Backends、拖曳項目（Item）、監視器（Monitors）\nBackends  HTML5: 支援 HTML5 DnD 事件 Touch: 支援行動裝置的觸控螢幕拖曳 Test: 支援 DnD 的互動測試  拖曳項目（Item）  拖曳元件的身分識別 定義拖曳元素可以放置在哪裡 其中攜帶拖曳元件的相關資訊，提供給放置元素進行放置動作的資料操作  監視器（Monitors）  提供 React 元件（component）來自於（實體）DOM 端的 DnD 事件 監視器會將收集到來自於 DOM 的事件注入至context中  2. Collectors  Collectors 收集 React 所需要資訊，包括收集函式（Collector Functions）、拖曳元件（Drag Sources）、放置（目標）元件（Drop Target）\n收集函式（Collector Functions）  收集函式將監視器（monitor）得到的資訊注入 React 元件的props當中  拖曳元件（Drag Sources）  綁定可拖曳的元件（component） 攜帶拖曳元件的相關資訊，提供給放置元件  放置（目標）元件（Drop Target）  定義可接受放置的拖曳元件  React-DnD API DndProvider 定義拖曳（來源）元件（Drag Sources）及放置（目標）元件（Drop Target）的範圍\nimport Backend from \u0026#34;react-dnd-html5-backend\u0026#34;; import { DndProvider } from \u0026#34;react-dnd\u0026#34;; export default class YourApp { render() { return \u0026lt;DndProvider backend={Backend}\u0026gt;/* Your Drag-and-Drop Application */\u0026lt;/DndProvider\u0026gt;; } } 拖曳（來源）元件（Drag Sources） 綁定拖曳的元件、定義拖曳的行為\nimport { useDrag } from \u0026#34;react-dnd\u0026#34;; function DraggableComponent(props) { const [collectedDragProps, drag, preview] = useDrag({ // 必填欄位  item: { type: \u0026#34;task\u0026#34;, id: 1 }, // 選填欄位  begin: (monitor) =\u0026gt; {}, // 開始拖曳的時候要做什麼事  end: (item, monitor) =\u0026gt; {}, isDragging: (monitor) =\u0026gt; {}, // return isDragging 的條件  canDrag: (monitor) =\u0026gt; {}, // return canDrag 的條件  collect: (monitor) =\u0026gt; ({ canDrag: Boolean(monitor.canDrag()), // 將上述的屬性值收集起來  isDragging: Boolean(monitor.isDragging()), didDrop: Boolean(monitor.didDrop()), }), }); const { canDrag, isDragging, didDrop } = collectedDragProps; // 所有收集起來的值會 collectedDragProps 裡面  return \u0026lt;div ref={drag}\u0026gt;...\u0026lt;/div\u0026gt;; } 放置（目標）元件（Drop Target） 綁定放置的元件、定義放置的行為\nimport { useDrop } from \u0026#34;react-dnd\u0026#34;; function myDropTarget(props) { const [collectedDropProps, drop] = useDrop({ // 必填欄位  accept: \u0026#34;task\u0026#34;, // 接受元件的類別，可以是一個陣列，放置多個接受的類別， 例如：[\u0026#39;task\u0026#39;, \u0026#39;story\u0026#39;]  // 選填欄位  drop: (item, monitor) =\u0026gt; {}, // 拖曳元件放開的時候要做的事  hover: (item, monitor) =\u0026gt; {}, // 拖曳元件hover的時候要做的事  canDrop: (monitor) =\u0026gt; {}, // 定義是否可以拖曳的條件，return一個布林值  collect: (monitor) =\u0026gt; ({ isOver: Boolean(monitor.isOver()), // 將上述的屬性值收集起來  canDrop: Boolean(monitor.canDrop()), }), }); const { isOver, canDrop } = collectedDropProps; // 所有收集起來的值會 collectedDropProps 裡面  return \u0026lt;div ref={drop}\u0026gt;Drop Target\u0026lt;/div\u0026gt;; } 最後附上範例連結\n參考資料  React DnD Playing around with react-dnd - YouTube(推薦教學影片)  ","permalink":"https://kazettique.github.io/posts/react-dnd-example/","summary":"基本概念 Image Reference HTML5 提供原生的HTML5 Drag \u0026amp; Drop API（以下簡稱 HTML5 DnD）實現 DOM 元素拖曳的功能。但是由於在 React 的生態底下，並不適合操作實體 DOM，因此","title":"React-DnD 簡單示範"}]